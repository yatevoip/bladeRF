; Compile: g++ ../sigproc.cpp test_rx.cpp  -I/usr/local/include/yate -lyate -g -o test_rx.out
; Run: ./test_rx.out
;All the vectors have the following options:
;file_name: String Output File
;file_append: boolean: True to append the data to output file.
;prefix: String: String to be added before dumped data.
;postfix: String to be added at the end of the dumped data.
;dump_format: String: The format to pass to ::printf.
;output: boolean: True to dump the data to stdout.
;print-len: Integer. Dump a limited number of values. -1 for all.
;print_stats: boolean True to print statistics about the data.
;compare_padding; integer; The index in data array from which the data will be compared
;compare_file:String:The file name in which the data is placed
;file_prefix: String: The prefix in the compare file to identify the requested data
;is_float: boolean: True if the data is float
;compare: String: Comma separated array of input data

; Input Data: Can be loaded from a file or from the configuration.

; Each section represents a test point.
; Some Test Points can have intermediate Test Points: eg: the qmf tree


; Test Points:
;	- hq: Represents the convolution vector H used in qmf tree.
;	- qmf(index) with index 0->14 Test points in intermediate QMF nodes
;		- x :the input data
;		- xp: the frequency shifted Data
;		- fs: the frequency shifted array
;		- w : the half band filter
;	- demod-he: the output vector from channel estimator
;	    NOTE The parameters have to be padded with "arfcn_index."
;	- demod-u: The real part of the demodulator convolution
;	    NOTE The parameters have to be padded with "arfcn_index."
;	- demod-out: The output of the demodulator
;	    NOTE The parameters have to be padded with "arfcn_index."
;	- estimate: The estimation output
;	    NOTE The parameters have to be padded with "arfcn_index."


; useful dB table for image gains
;linear		dB
;0.1		-20
;0.2		-14
;0.3		-10
;0.4		-8
;0.5		-6
;0.6		-4.5
;0.7		-3
;0.8		-2
;0.9		-1
;1.0		0
;1.1		+1
;1.4		+3
;1.6		+4
;1.8		+5
;2.0		+6
;2.2		+7
;2.5		+8
;2.8		+9
;3.2		+10
;3.5		+11
;4.0		+12
;4.5		+13



; additional parameters for data_in
: delay - delay the input signal by this number of samples
; image-delay - insert an image delayed by this many samples (additional to "delay" above)
; image-gain - image gain, linear scale x10
[data_in]
;normalBurst=false
output=true
prefix=x=[
postfix=];
compare_file=rx_in_data.txt
file_prefix=input-data:
print_stats=true
delay=0

; test cases to be sure the multipath modeler actually works

; 4 symbols
;image-delay=32
;image-gain=10
;image-phase=0
;image-phase=90
;image-phase=180

; 2 and 2 symbols
image-delay=16
image-gain=10
image-phase=0
image2-delay=32
image2-gain=10
image2-phase=0



; path-ology
;image-delay=1
;image-gain=10
;image-phase=180


; 3-tap approximations for multipath test cases
; from GSM 05.05 annex C
; do multiple tests with differing phases on the images
;RAx
;image-delay=1
;image-gain=2
;image-phase=90
;HTx
;image-delay=1
;image-gain=6
;image-phase=90
;image2-delay=30
;image2-gain=4
;TUx
;image-delay=1
;image-gain=14
;image-phase=90
;image2-delay=3
;image2-gain=5
;EQx
;image-delay=6
;image-gain=10
;image-phase=90
;image2-delay=13
;image2-gain=10
;TIx
image-delay=1
image-gain=10
image-phase=180



[hq]
;compare_file=rx_in_data.txt
;file_prefix=hq:
delay=8
output=true
prefix=hq=[
postfix=];
dump_format=%f 
is_float=true
print_stats=true

[demod-he]
0.output=true
;0.compare_file=rx_in_data.txt
;0.file_prefix=demod-he:0:
0.print_stats=true

[demod-u]
0.output=true
0.dump_format= %f 
;0.compare_file=rx_in_data.txt
;0.file_prefix=demod-u:0:
0.is_float=true
0.print_stats=true

[demod-out]
0.output=true
0.dump_format= %f 
;0.compare_file=rx_in_data.txt
;0.file_prefix=demod-out:0:
0.is_float=true
0.print_stats=true

[estimate]
0.output=true
0.dump_format= %.0f 
0.is_float=true
;0.compare_file=rx_in_data.txt
;0.file_prefix=output-data:0:
0.print_stats=true

 
[qmf(0)]
fs.output=true
fs.prefix=qmf0fs=[
fs.postfix=];
fs.print-len=-1
fs.print_stats=true
;fs.compare_file=rx_in_data.txt
;fs.compare_padding=11
;fs.file_prefix=qmf0.fs:

x.output=true
x.prefix=qmf0x=[
x.postfix=];
x.print-len=-1
x.print_stats=true
;x.compare_file=rx_in_data.txt
;x.compare_padding=11
;x.file_prefix=qmf0.x:
x.print_stats=true

xp.output=true
xp.prefix=qmf0xp=[
xp.postfix=];
xp.print-len=-1
xp.print_stats=true
;xp.compare_file=rx_in_data.txt
;xp.compare_padding=11
;xp.file_prefix=qmf0.xp:

w.output=true
w.prefix=qmf0w=[
w.postfix=];
w,print_stats=true
w.print-len=-1
;w.compare_file=rx_in_data.txt
;w.compare_padding=11
;w.file_prefix=qmf0.w:


[qmf(1)]
;fs.output=true
fs.prefix=qmf1fs=[
fs.postfix=]
fs.print-len=-1
fs.print_stats=true
;fs.compare_file=rx_in_data.txt
;fs.compare_padding=11
;fs.file_prefix=qmf1.fs:

x.output=true
x.prefix=qmf1x=[
x.postfix=]
x.print-len=-1
x.print_stats=true
;x.compare_file=rx_in_data.txt
;x.compare_padding=11
;x.file_prefix=qmf1.x:

xp.output=true
xp.prefix=qmf1xp=[
xp.postfix=];
xp.print-len=-1
xp.print_stats=true
;xp.compare_file=rx_in_data.txt
;xp.compare_padding=11
;xp.file_prefix=qmf1.xp:

w.output=true
w.prefix=qmf1w=[
w.postfix=];
w.print-len=-1
w.print_stats=true
;w.compare_file=rx_in_data.txt
;w.compare_padding=11
;w.file_prefix=qmf1.w:

[qmf(2)]
;fs.output=true
fs.prefix=qmf2fs=[
fs.postfix=];
fs.print-len=-1
fs.print_stats=true
;fs.compare_file=rx_in_data.txt
;fs.compare_padding=11
;fs.file_prefix=qmf2.fs:

x.output=true
x.prefix=qmf2x=[
x.postfix=];
x.print-len=-1
x.print_stats=true
;x.compare_file=rx_in_data.txt
;x.compare_padding=11
;x.file_prefix=qmf2.x:

xp.output=true
xp.prefix=qmf2xp=[
xp.postfix=];
xp.print-len=-1
xp.print_stats=true
;xp.compare_file=rx_in_data.txt
;xp.compare_padding=11
;xp.file_prefix=qmf2.xp:

w.output=true
w.prefix=qmf2w=[
w.postfix=];
w.print-len=-1
w.print_stats=true
;w.compare_file=rx_in_data.txt
;w.compare_padding=11
;w.file_prefix=qmf2.w:


[qmf(3)]
;fs.output=true
fs.prefix=qmf3fs=[
fs.postfix=];
fs.print-len=-1
;fs.compare_file=rx_in_data.txt
;fs.compare_padding=11
;fs.file_prefix=qmf3.fs:

;x.output=true
x.prefix=qmf3x=[
x.postfix=];
x.print-len=-1
;x.compare_file=rx_in_data.txt
;x.compare_padding=11
;x.file_prefix=qmf3.x:

;xp.output=true
xp.prefix=qmf3xp=[
xp.postfix=];
xp.print-len=-1
;xp.compare_file=rx_in_data.txt
;xp.compare_padding=11
;xp.file_prefix=qmf3.xp:

;w.output=true
w.prefix=qmf3w=[
w.postfix=];
w.print-len=-1
;w.compare_file=rx_in_data.txt
;w.compare_padding=11
;w.file_prefix=qmf3.w:


[qmf(7)]
;fs.output=true
fs.prefix=qmf7fs=[
fs.postfix=];
fs.print-len=-1
;fs.compare_file=rx_in_data.txt
;fs.compare_padding=11
;fs.file_prefix=qmf7.fs:

x.output=true
x.prefix=qmf7x=[
x.postfix=];
x.print-len=-1
x.print_stats=true
;x.compare_file=rx_in_data.txt
;x.compare_padding=11
;x.file_prefix=qmf7.x:

xp.output=true
xp.prefix=qmf7xp=[
xp.postfix=];
xp.postfix=];
xp.print-len=-1
xp.print_stats=true
;xp.compare_file=rx_in_data.txt
;xp.compare_padding=11
;xp.file_prefix=qmf7.xp:
xp.print_stats=true

w.output=true
w.prefix=qmf7w=[
w.postfix=];
w.print-len=-1
w.print_stats=true
;w.compare_file=rx_in_data.txt
;w.compare_padding=11
;w.file_prefix=qmf7.w:

